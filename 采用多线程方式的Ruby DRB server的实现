DRB是ruby的远程进程调用（remote process calling）机制，类似于java的RMI。近期在一个项目中采用了DRB实现server与client之间的通信，其中对于server有以下要求：
a) 并发处理多个client的请求，对于每个client用一个线程来处理；
b) client发出请求后可以立即返回，不需要阻塞在那里等待server处理。

我对server的设计如下：
给client调用的接口函数放在server主线程中。主线程还维护了一个消息队列，每收到一个client的服务请求，就把这个请求添加到消息队列中。

对服务请求的具体处理由processor对象来实现。对于每个请求创建一个processor对象，并创建一个新的子线程，在子线程中执行这个processor对象的服务请求处理函数。

整个server的代码比较短，不过因为我不熟悉ruby线程和drb，写的过程中踩到几个陷阱。现在把实现时需要注意的几点总结如下：
1) 为了实现上述b)，server主线程中给client调用的接口函数不完成具体的服务请求处理，只是创建新的processor对象，并且把client的请求放到消息队列里面。

2) 在主线程里，当DRB服务启动之后，执行server.run。这个server.run是一个死循环（消息循环）。每次从消息队列里面取出排在头上的消息，创建子线程，把对应的processor对象放到子线程里面，对消息进行处理。处理完了这个子线程就exit。

3)ruby启动子线程有thread.join和thread.run两种方式。其中thread.join会让主线程阻塞，等待子线程退出之后才返回。我一开始用的thread.join，结果主线程挂起了，只有等第一个子线程处理完退出之后才会读第二条消息，创建第二个子线程，所以实际上没有实现对多个服务请求的并发处理。改成thread.run，主线程不会阻塞，就可以并发了。但是thread.run是当主线程退出时，所有子线程都会被强制结束。所以把主线程的server.run做成死循环，保证每个子线程都可以正常执行完再退出。

还有两个需要优化的地方，作为下一步的工作：
1) 现在这样频繁的创新子线程比较耗资源，做成线程池的方式会好一些。
2) 现在只有一个消息队列，是按FIFO处理的。还可以做得更灵活一些，比如支持多个优先级，按照一定的策略对于消息队列进行调度，等等。



